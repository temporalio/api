// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package workflowservice;

option go_package = "go.temporal.io/temporal-proto/workflowservice";
option java_package = "io.temporal.proto.workflowservice";
option java_multiple_files = true;

import "enums/enums.proto";
import "common/common.proto";
import "common/namespace.proto";
import "common/history.proto";
import "common/decision.proto";
import "common/workflow_execution.proto";

message RegisterNamespaceRequest {
    string name = 1;
    string description = 2;
    string ownerEmail = 3;
    int32 workflowExecutionRetentionPeriodInDays = 4;
    bool emitMetric = 5;
    repeated common.ClusterReplicationConfiguration clusters = 6;
    string activeClusterName = 7;
    // A key-value map for any customized purpose.
    map<string, string> data = 8;
    string securityToken = 9;
    bool isGlobalNamespace = 10;
    enums.ArchivalStatus historyArchivalStatus = 11;
    string historyArchivalURI = 12;
    enums.ArchivalStatus visibilityArchivalStatus = 13;
    string visibilityArchivalURI = 14;
}

message RegisterNamespaceResponse {
}

message ListNamespacesRequest {
    int32 pageSize = 1;
    bytes nextPageToken = 2;
}

message ListNamespacesResponse {
    repeated DescribeNamespaceResponse namespaces = 1;
    bytes nextPageToken = 2;
}

message DescribeNamespaceRequest {
    string name = 1;
    string id = 2;
}

message DescribeNamespaceResponse {
    common.NamespaceInfo namespaceInfo = 1;
    common.NamespaceConfiguration configuration = 2;
    common.NamespaceReplicationConfiguration replicationConfiguration = 3;
    int64 failoverVersion = 4;
    bool isGlobalNamespace = 5;
}

message UpdateNamespaceRequest {
    string name = 1;
    common.UpdateNamespaceInfo updatedInfo = 2;
    common.NamespaceConfiguration configuration = 3;
    common.NamespaceReplicationConfiguration replicationConfiguration = 4;
    string securityToken = 5;
    string deleteBadBinary = 6;
}

message UpdateNamespaceResponse {
    common.NamespaceInfo namespaceInfo = 1;
    common.NamespaceConfiguration configuration = 2;
    common.NamespaceReplicationConfiguration replicationConfiguration = 3;
    int64 failoverVersion = 4;
    bool isGlobalNamespace = 5;
}

message DeprecateNamespaceRequest {
    string name = 1;
    string securityToken = 2;
}

message DeprecateNamespaceResponse {
}

message StartWorkflowExecutionRequest {
    string namespace = 1;
    string workflowId = 2;
    common.WorkflowType workflowType = 3;
    common.TaskList taskList = 4;
    bytes input = 5;
    int32 executionStartToCloseTimeoutSeconds = 6;
    int32 taskStartToCloseTimeoutSeconds = 7;
    string identity = 8;
    string requestId = 9;
    enums.WorkflowIdReusePolicy workflowIdReusePolicy = 10;
    common.RetryPolicy retryPolicy = 11;
    string cronSchedule = 12;
    common.Memo memo = 13;
    common.SearchAttributes searchAttributes = 14;
    common.Header header = 15;
}

message StartWorkflowExecutionResponse {
    string runId = 1;
}

message GetWorkflowExecutionHistoryRequest {
    string namespace = 1;
    common.WorkflowExecution execution = 2;
    int32 maximumPageSize = 3;
    bytes nextPageToken = 4;
    bool waitForNewEvent = 5;
    enums.HistoryEventFilterType HistoryEventFilterType = 6;
}

message GetWorkflowExecutionHistoryResponse {
    common.History history = 1;
    bytes nextPageToken = 2;
    bool archived = 3;
}

message PollForDecisionTaskRequest {
    string namespace = 1;
    common.TaskList taskList = 2;
    string identity = 3;
    string binaryChecksum = 4;
}

message PollForDecisionTaskResponse {
    bytes taskToken = 1;
    common.WorkflowExecution workflowExecution = 2;
    common.WorkflowType workflowType = 3;
    int64 previousStartedEventId = 4;
    int64 startedEventId = 5;
    int64 attempt = 6;
    int64 backlogCountHint = 7;
    common.History history = 8;
    bytes nextPageToken = 9;
    common.WorkflowQuery query = 10;
    common.TaskList WorkflowExecutionTaskList = 11;
    int64 scheduledTimestamp = 12;
    int64 startedTimestamp = 13;
    map<string, common.WorkflowQuery> queries = 14;
}

message RespondDecisionTaskCompletedRequest {
    bytes taskToken = 1;
    repeated common.Decision decisions = 2;
    bytes executionContext = 3;
    string identity = 4;
    common.StickyExecutionAttributes stickyAttributes = 5;
    bool returnNewDecisionTask = 6;
    bool forceCreateNewDecisionTask = 7;
    string binaryChecksum = 8;
    map<string, common.WorkflowQueryResult> queryResults = 9;
}

message RespondDecisionTaskCompletedResponse {
    PollForDecisionTaskResponse decisionTask = 1;
}

message RespondDecisionTaskFailedRequest {
    bytes taskToken = 1;
    enums.DecisionTaskFailedCause cause = 2;
    bytes details = 3;
    string identity = 4;
    string binaryChecksum = 5;
}

message RespondDecisionTaskFailedResponse {
}

message PollForActivityTaskRequest {
    string namespace = 1;
    common.TaskList taskList = 2;
    string identity = 3;
    common.TaskListMetadata taskListMetadata = 4;
}

message PollForActivityTaskResponse {
    bytes taskToken = 1;
    common.WorkflowExecution workflowExecution = 2;
    string activityId = 3;
    common.ActivityType activityType = 4;
    bytes input = 5;
    int64 scheduledTimestamp = 6;
    int32 scheduleToCloseTimeoutSeconds = 7;
    int64 startedTimestamp = 8;
    int32 startToCloseTimeoutSeconds = 9;
    int32 heartbeatTimeoutSeconds = 10;
    int32 attempt = 11;
    int64 scheduledTimestampOfThisAttempt = 12;
    bytes heartbeatDetails = 13;
    common.WorkflowType workflowType = 14;
    string workflowNamespace = 15;
    common.Header header = 16;
}

message RecordActivityTaskHeartbeatRequest {
    bytes taskToken = 1;
    bytes details = 2;
    string identity = 3;
}

message RecordActivityTaskHeartbeatResponse {
    bool cancelRequested = 1;
}

message RecordActivityTaskHeartbeatByIdRequest {
    string namespace = 1;
    string workflowId = 2;
    string runId = 3;
    string activityId = 4;
    bytes details = 5;
    string identity = 6;
}

message RecordActivityTaskHeartbeatByIdResponse {
    bool cancelRequested = 1;
}

message RespondActivityTaskCompletedRequest {
    bytes taskToken = 1;
    bytes result = 2;
    string identity = 3;
}

message RespondActivityTaskCompletedResponse {
}

message RespondActivityTaskCompletedByIdRequest {
    string namespace = 1;
    string workflowId = 2;
    string runId = 3;
    string activityId = 4;
    bytes result = 5;
    string identity = 6;
}

message RespondActivityTaskCompletedByIdResponse {
}

message RespondActivityTaskFailedRequest {
    bytes taskToken = 1;
    string reason = 2;
    bytes details = 3;
    string identity = 4;
}

message RespondActivityTaskFailedResponse {
}

message RespondActivityTaskFailedByIdRequest {
    string namespace = 1;
    string workflowId = 2;
    string runId = 3;
    string activityId = 4;
    string reason = 5;
    bytes details = 6;
    string identity = 7;
}

message RespondActivityTaskFailedByIdResponse {
}

message RespondActivityTaskCanceledRequest {
    bytes taskToken = 1;
    bytes details = 2;
    string identity = 3;
}

message RespondActivityTaskCanceledResponse {
}

message RespondActivityTaskCanceledByIdRequest {
    string namespace = 1;
    string workflowId = 2;
    string runId = 3;
    string activityId = 4;
    bytes details = 5;
    string identity = 6;
}

message RespondActivityTaskCanceledByIdResponse {
}

message RequestCancelWorkflowExecutionRequest {
    string namespace = 1;
    common.WorkflowExecution workflowExecution = 2;
    string identity = 3;
    string requestId = 4;
}

message RequestCancelWorkflowExecutionResponse {
}

message SignalWorkflowExecutionRequest {
    string namespace = 1;
    common.WorkflowExecution workflowExecution = 2;
    string signalName = 3;
    bytes input = 4;
    string identity = 5;
    string requestId = 6;
    bytes control = 7;
}

message SignalWorkflowExecutionResponse {
}

message SignalWithStartWorkflowExecutionRequest {
    string namespace = 1;
    string workflowId = 2;
    common.WorkflowType workflowType = 3;
    common.TaskList taskList = 4;
    bytes input = 5;
    int32 executionStartToCloseTimeoutSeconds = 6;
    int32 taskStartToCloseTimeoutSeconds = 7;
    string identity = 8;
    string requestId = 9;
    enums.WorkflowIdReusePolicy workflowIdReusePolicy = 10;
    string signalName = 11;
    bytes signalInput = 12;
    bytes control = 13;
    common.RetryPolicy retryPolicy = 14;
    string cronSchedule = 15;
    common.Memo memo = 16;
    common.SearchAttributes searchAttributes = 17;
    common.Header header = 18;
}

message SignalWithStartWorkflowExecutionResponse {
    string runId = 1;
}

message ResetWorkflowExecutionRequest {
    string namespace = 1;
    common.WorkflowExecution workflowExecution = 2;
    string reason = 3;
    int64 decisionFinishEventId = 4;
    string requestId = 5;
}

message ResetWorkflowExecutionResponse {
    string runId = 1;
}

message TerminateWorkflowExecutionRequest {
    string namespace = 1;
    common.WorkflowExecution workflowExecution = 2;
    string reason = 3;
    bytes details = 4;
    string identity = 5;
}

message TerminateWorkflowExecutionResponse {
}

message ListOpenWorkflowExecutionsRequest {
    string namespace = 1;
    int32 maximumPageSize = 2;
    bytes nextPageToken = 3;
    common.StartTimeFilter StartTimeFilter = 4;
    oneof Filters {
        common.WorkflowExecutionFilter executionFilter = 5;
        common.WorkflowTypeFilter typeFilter = 6;
    }
}

message ListOpenWorkflowExecutionsResponse {
    repeated common.WorkflowExecutionInfo executions = 1;
    bytes nextPageToken = 2;
}

message ListClosedWorkflowExecutionsRequest {
    string namespace = 1;
    int32 maximumPageSize = 2;
    bytes nextPageToken = 3;
    common.StartTimeFilter StartTimeFilter = 4;
    oneof Filters {
        common.WorkflowExecutionFilter executionFilter = 5;
        common.WorkflowTypeFilter typeFilter = 6;
        common.StatusFilter statusFilter = 7;
    }
}

message ListClosedWorkflowExecutionsResponse {
    repeated common.WorkflowExecutionInfo executions = 1;
    bytes nextPageToken = 2;
}

message ListWorkflowExecutionsRequest {
    string namespace = 1;
    int32 pageSize = 2;
    bytes nextPageToken = 3;
    string query = 4;
}

message ListWorkflowExecutionsResponse {
    repeated common.WorkflowExecutionInfo executions = 1;
    bytes nextPageToken = 2;
}

message ListArchivedWorkflowExecutionsRequest {
    string namespace = 1;
    int32 pageSize = 2;
    bytes nextPageToken = 3;
    string query = 4;
}

message ListArchivedWorkflowExecutionsResponse {
    repeated common.WorkflowExecutionInfo executions = 1;
    bytes nextPageToken = 2;
}

message ScanWorkflowExecutionsRequest {
    string namespace = 1;
    int32 pageSize = 2;
    bytes nextPageToken = 3;
    string query = 4;
}

message ScanWorkflowExecutionsResponse {
    repeated common.WorkflowExecutionInfo executions = 1;
    bytes nextPageToken = 2;
}

message CountWorkflowExecutionsRequest {
    string namespace = 1;
    string query = 2;
}

message CountWorkflowExecutionsResponse {
    int64 count = 1;
}

message GetSearchAttributesRequest {
}

message GetSearchAttributesResponse {
    map<string, enums.IndexedValueType> keys = 1;
}

message RespondQueryTaskCompletedRequest {
    bytes taskToken = 1;
    enums.QueryTaskCompletedType completedType = 2;
    bytes queryResult = 3;
    string errorMessage = 4;
    common.WorkerVersionInfo workerVersionInfo = 5;
}

message RespondQueryTaskCompletedResponse {
}

message ResetStickyTaskListRequest {
    string namespace = 1;
    common.WorkflowExecution execution = 2;
}

message ResetStickyTaskListResponse {
}

message QueryWorkflowRequest {
    string namespace = 1;
    common.WorkflowExecution execution = 2;
    common.WorkflowQuery query = 3;
    // QueryRejectCondition can used to reject the query if workflow state does not satisfy condition
    enums.QueryRejectCondition queryRejectCondition = 4;
    enums.QueryConsistencyLevel queryConsistencyLevel = 5;
}

message QueryWorkflowResponse {
    bytes queryResult = 1;
    common.QueryRejected queryRejected = 2;
}

message GetWorkflowExecutionRawHistoryRequest {
    string namespace = 1;
    common.WorkflowExecution execution = 2;
    int32 maximumPageSize = 3;
    bytes nextPageToken = 4;
}

message GetWorkflowExecutionRawHistoryResponse {
    repeated common.DataBlob rawHistory = 1;
    bytes nextPageToken = 2;
}

message DescribeWorkflowExecutionRequest {
    string namespace = 1;
    common.WorkflowExecution execution = 2;
}

message DescribeWorkflowExecutionResponse {
    common.WorkflowExecutionConfiguration executionConfiguration = 1;
    common.WorkflowExecutionInfo workflowExecutionInfo = 2;
    repeated common.PendingActivityInfo pendingActivities = 3;
    repeated common.PendingChildExecutionInfo pendingChildren = 4;
}

message DescribeTaskListRequest {
    string namespace = 1;
    common.TaskList taskList = 2;
    enums.TaskListType taskListType = 3;
    bool includeTaskListStatus = 4;
}

message DescribeTaskListResponse {
    repeated common.PollerInfo pollers = 1;
    common.TaskListStatus taskListStatus = 2;
}

message GetClusterInfoRequest {
}

// GetClusterInfoResponse contains information about Temporal cluster
message GetClusterInfoResponse {
    common.SupportedClientVersions supportedClientVersions = 1;
}

message ListTaskListPartitionsRequest {
    string namespace = 1;
    common.TaskList taskList = 2;
}

message ListTaskListPartitionsResponse {
    repeated common.TaskListPartitionMetadata activityTaskListPartitions = 1;
    repeated common.TaskListPartitionMetadata decisionTaskListPartitions = 2;
}

message PollForWorkflowExecutionRawHistoryRequest {
  string namespace = 1;
  common.WorkflowExecution execution = 2;
  int32 maximumPageSize = 3;
  bytes nextPageToken = 4;
  enums.HistoryEventFilterType HistoryEventFilterType = 5;
}

message PollForWorkflowExecutionRawHistoryResponse {
  repeated common.DataBlob rawHistory = 1;
  bytes nextPageToken = 2;
}