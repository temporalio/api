// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.deployment.v1;

option go_package = "go.temporal.io/api/deployment/v1;deployment";
option java_package = "io.temporal.api.deployment.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option ruby_package = "Temporalio::Api::Deployment::V1";
option csharp_namespace = "Temporalio.Api.Deployment.V1";

import "google/protobuf/timestamp.proto";

import "temporal/api/enums/v1/task_queue.proto";
import "temporal/api/common/v1/message.proto";

// `Deployment` identifies a deployment of Temporal workers. The combination of deployment series
// name + build ID serves as the identifier. User can use `WorkerDeploymentOptions` in their worker
// programs to specify these values.
// [cleanup-wv-pre-release]
message Deployment {
    // Different versions of the same worker service/application are related together by having a
    // shared series name.
    // Out of all deployments of a series, one can be designated as the current deployment, which
    // receives new workflow executions and new tasks of workflows with
    // `VERSIONING_BEHAVIOR_AUTO_UPGRADE` versioning behavior.
    string series_name = 1;
    // Build ID changes with each version of the worker when the worker program code and/or config
    // changes.
    string build_id = 2;
}

message WorkerDeploymentVersion {
    // Uniquely identifies the worker deployment version.
    string version = 1;
    // The name of the deployment this version belongs too.
    string deployment_name = 2;
}

// `DeploymentInfo` holds information about a deployment. Deployment information is tracked
// automatically by server as soon as the first poll from that deployment reaches the server. There
// can be multiple task queue workers in a single deployment which are listed in this message.
// [cleanup-wv-pre-release] 
message DeploymentInfo {
    Deployment deployment = 1;
    google.protobuf.Timestamp create_time = 2;
    repeated TaskQueueInfo task_queue_infos = 3;
    // A user-defined set of key-values. Can be updated as part of write operations to the
    // deployment, such as `SetCurrentDeployment`.
    map<string, temporal.api.common.v1.Payload> metadata = 4;
    // If this deployment is the current deployment of its deployment series.
    bool is_current = 5;

    message TaskQueueInfo {
        string name = 1;
        temporal.api.enums.v1.TaskQueueType type = 2;
        // When server saw the first poller for this task queue in this deployment.
        google.protobuf.Timestamp first_poller_time = 3;
    }
}

// Used as part of Deployment write APIs to update metadata attached to a deployment.
// [cleanup-wv-pre-release] 
message UpdateDeploymentMetadata {
    map<string, temporal.api.common.v1.Payload> upsert_entries = 1;
    // List of keys to remove from the metadata.
    repeated string remove_entries = 2;
}

// DeploymentListInfo is an abbreviated set of fields from DeploymentInfo that's returned in
// ListDeployments.
// [cleanup-wv-pre-release] 
message DeploymentListInfo {
    deployment.v1.Deployment deployment = 1;
    google.protobuf.Timestamp create_time = 2;
    // If this deployment is the current deployment of its deployment series.
    bool is_current = 3;
}


// A Worker Deployment Version (Version, for short) represents all workers of the same 
// code and config within a Deployment. Workers of the same Version are expected to 
// behave exactly the same so when executions move between them there are no 
// non-determinism issues.
// Worker Deployment Versions are created in Temporal server automatically when 
// their first poller arrives to the server.
// Each Version has a Workflow Versioning Mode which is chosen by the app
// developer. (see WorkflowVersioningMode enum documentation)
message WorkerDeploymentVersionInfo {
    // Identifies a Worker Deployment Version. Must be unique within the namespace.
    // Same ID cannot be used in multiple Deployments.
    // In some contexts, such as Reset-by-build-id, version might be used
    // as "Build ID".
    string version = 1;

    // Each Worker Version belongs to exactly one Deployment.
    string deployment_name = 2;

    google.protobuf.Timestamp create_time = 3;
    // All the Task Queues that have ever polled from this Deployment version.
    repeated WorkerBuildTaskQueueInfo task_queue_infos = 4;

    message WorkerBuildTaskQueueInfo {
        string name = 1;
        temporal.api.enums.v1.TaskQueueType type = 2;
    }
}


