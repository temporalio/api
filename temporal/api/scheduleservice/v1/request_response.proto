// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.scheduleservice.v1;

option go_package = "go.temporal.io/api/scheduleservice/v1;scheduleservice";
option java_package = "io.temporal.api.scheduleservice.v1";
option java_multiple_files = true;
option java_outer_classname = "RequestResponseProto";
option ruby_package = "Temporal::Api::ScheduleService::V1";
option csharp_namespace = "Temporal.Api.ScheduleService.V1";

import "temporal/api/schedule/v1/message.proto";

message CreateScheduleRequest {
    // The namespace the schedule should be created in.
    string namespace = x;
    // The id of the new schedule.
    string schedule_id = x;
    temporal.api.schedule.v1.Schedule schedule = x;
    // The identity of the client who initiated this request.
    string identity = x;
    // A unique identifier for this create request. Typically UUIDv4.
    string request_id = x;
}

message CreateScheduleResponse {
}

message DescribeScheduleRequest {
    // The namespace of the schedule to describe.
    string namespace = x;
    // The id of the schedule to describe.
    string schedule_id = x;
}

message DescribeScheduleResponse {
    // The complete current schedule details. This may not match the schedule as
    // created because:
    // - some fields in the state are modified automatically
    // - the schedule may have been modified by UpdateSchedule
    temporal.api.schedule.v1.Schedule schedule = x;
}

message UpdateScheduleRequest {
    // The namespace of the schedule to update.
    string namespace = x;
    // The id of the schedule to update.
    string schedule_id = x;
    // The new schedule. A Schedule has four fields (description, action, policies,
    // state), each of which can be present or absent from this message. If a field is
    // absent here, it is not modified. If it's present, it's replaced entirely.
    // This makes it easier to change state fields like "paused" or "trigger_immediately"
    // without modifying the rest of the schedule.
    temporal.api.schedule.v1.Schedule schedule = x;
    // The identity of the client who initiated this request.
    string identity = x;
    // A unique identifier for this update request. Typically UUIDv4.
    string request_id = x;
}

message UpdateScheduleResponse {
}

message DeleteScheduleRequest {
    // The namespace of the schedule to delete.
    string namespace = x;
    // The id of the schedule to delete.
    string schedule_id = x;
    // The identity of the client who initiated this request.
    string identity = x;
    // A unique identifier for this update request. Typically UUIDv4.
    string request_id = x;
}

message DeleteScheduleResponse {
}

message ListSchedulesRequest {
    // The namespace to list schedules in.
    string namespace = x;
    // How many to return at once.
    int32 maximum_page_size = x;
    // Token to get the next page of results.
    bytes next_page_token = x;
}

message ListSchedulesResponse {
    repeated temporal.api.schedule.v1.ScheduleListEntry schedules = x;
    bytes next_page_token = x;
}
