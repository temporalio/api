// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package tasklist.v1;

option go_package = "go.temporal.io/temporal-proto/tasklist.v1;tasklist";
option java_package = "io.temporal.proto.tasklist.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";

import "enums/v1/task_list.proto";
import "google/protobuf/wrappers.proto";

message TaskList {
    string name = 1;
    enums.v1.TaskListKind kind = 2;
}

message TaskListMetadata {
    google.protobuf.DoubleValue maxTasksPerSecond = 1;
}

message TaskListStatus {
    int64 backlogCountHint = 1;
    int64 readLevel = 2;
    int64 ackLevel = 3;
    double ratePerSecond = 4;
    TaskIdBlock taskIdBlock = 5;
}

message TaskIdBlock {
    int64 startId = 1;
    int64 endId = 2;
}

message TaskListPartitionMetadata {
    string key = 1;
    string ownerHostName = 2;
}

message PollerInfo {
    // Unix Nano
    int64 lastAccessTime = 1;
    string identity = 2;
    double ratePerSecond = 3;
}

message StickyExecutionAttributes {
    TaskList workerTaskList = 1;
    int32 scheduleToStartTimeoutSeconds = 2;
}
