// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package common;

option go_package = "go.temporal.io/temporal-proto/common";
option java_package = "io.temporal.proto.common";
option java_multiple_files = true;

enum EncodingType {
    ENCODING_TYPE_PROTO3 = 0;
    ENCODING_TYPE_JSON = 1;
}

enum WorkflowIdReusePolicy {
    // Allow start a workflow execution using the same workflow Id, when workflow not running.
    WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE = 0;
    // Allow start a workflow execution using the same workflow Id, when workflow not running, and the last execution close state is in
    // [terminated, cancelled, timed out, failed].
    WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY = 1;
    // Do not allow start a workflow execution using the same workflow Id at all.
    WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE = 2;
}

enum ParentClosePolicy {
    PARENT_CLOSE_POLICY_ABANDON = 0;
    PARENT_CLOSE_POLICY_REQUEST_CANCEL = 1;
    PARENT_CLOSE_POLICY_TERMINATE = 2;
}

enum IndexedValueType {
    INDEXED_VALUE_TYPE_STRING = 0;
    INDEXED_VALUE_TYPE_KEYWORD = 1;
    INDEXED_VALUE_TYPE_INT = 2;
    INDEXED_VALUE_TYPE_DOUBLE = 3;
    INDEXED_VALUE_TYPE_BOOL = 4;
    INDEXED_VALUE_TYPE_DATETIME = 5;
}

enum ContinueAsNewInitiator {
    CONTINUE_AS_NEW_INITIATOR_DECIDER = 0;
    CONTINUE_AS_NEW_INITIATOR_RETRY = 1;
    CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE = 2;
}

enum TimeoutType {
    TIMEOUT_TYPE_START_TO_CLOSE = 0;
    TIMEOUT_TYPE_SCHEDULE_TO_START = 1;
    TIMEOUT_TYPE_SCHEDULE_TO_CLOSE = 2;
    TIMEOUT_TYPE_HEARTBEAT = 3;
}

enum RetryStatus {
    RETRY_STATUS_IN_PROGRESS = 0;
    RETRY_STATUS_NON_RETRYABLE_FAILURE = 1;
    RETRY_STATUS_TIMEOUT = 2;
    RETRY_STATUS_MAXIMUM_ATTEMPTS_REACHED = 3;
    RETRY_STATUS_RETRY_POLICY_NOT_SET = 4;
    RETRY_STATUS_INTERNAL_SERVER_ERROR = 5;
    RETRY_STATUS_CANCEL_REQUESTED = 6;
}
