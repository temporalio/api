// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.deployment.v1;

option go_package = "go.temporal.io/api/deployment/v1;deployment";
option java_package = "io.temporal.api.deployment.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option ruby_package = "Temporalio::Api::Deployment::V1";
option csharp_namespace = "Temporalio.Api.Deployment.V1";

import "google/protobuf/timestamp.proto";

import "temporal/api/enums/v1/deployment.proto";
import "temporal/api/enums/v1/task_queue.proto";
import "temporal/api/common/v1/message.proto";

// Worker Deployment options set in SDK that need to be sent to server in every poll.
message WorkerDeploymentOptions {
    // Required. Worker Deployment name.
    string deployment_name = 1;
    // Required. Build ID of the worker. `deployment_name` and `build_id` together identify this
    // Worker Deployment Version.
    string build_id = 2;
    // Required. Workflow versioning mode for this Deployment Version. Must be the same for all
    // pollers in a given Deployment Version, across all Task Queues.
    temporal.api.enums.v1.WorkflowVersioningMode workflow_versioning_mode = 3;
}

// `Deployment` identifies a deployment of Temporal workers. The combination of deployment series
// name + build ID serves as the identifier. User can use `WorkerDeploymentOptions` in their worker
// programs to specify these values.
// [cleanup-wv-pre-release]
message Deployment {
    // Different versions of the same worker service/application are related together by having a
    // shared series name.
    // Out of all deployments of a series, one can be designated as the current deployment, which
    // receives new workflow executions and new tasks of workflows with
    // `VERSIONING_BEHAVIOR_AUTO_UPGRADE` versioning behavior.
    string series_name = 1;
    // Build ID changes with each version of the worker when the worker program code and/or config
    // changes.
    string build_id = 2;
}

// Identifies a Worker Deployment Version. The combination of `deployment_name` and `build_id`
// serve as the identifier.
message WorkerDeploymentVersion {
    // The name of the Deployment this version belongs too.
    string deployment_name = 2;
    // Build ID uniquely identifies the Deployment Version within a Deployment, but the same Build
    // ID can be used in multiple Deployments.
    string build_id = 1;
}

// `DeploymentInfo` holds information about a deployment. Deployment information is tracked
// automatically by server as soon as the first poll from that deployment reaches the server. There
// can be multiple task queue workers in a single deployment which are listed in this message.
// [cleanup-wv-pre-release] 
message DeploymentInfo {
    Deployment deployment = 1;
    google.protobuf.Timestamp create_time = 2;
    repeated TaskQueueInfo task_queue_infos = 3;
    // A user-defined set of key-values. Can be updated as part of write operations to the
    // deployment, such as `SetCurrentDeployment`.
    map<string, temporal.api.common.v1.Payload> metadata = 4;
    // If this deployment is the current deployment of its deployment series.
    bool is_current = 5;

    message TaskQueueInfo {
        string name = 1;
        temporal.api.enums.v1.TaskQueueType type = 2;
        // When server saw the first poller for this task queue in this deployment.
        google.protobuf.Timestamp first_poller_time = 3;
    }
}

// Used as part of Deployment write APIs to update metadata attached to a deployment.
// [cleanup-wv-pre-release] 
message UpdateDeploymentMetadata {
    map<string, temporal.api.common.v1.Payload> upsert_entries = 1;
    // List of keys to remove from the metadata.
    repeated string remove_entries = 2;
}

// DeploymentListInfo is an abbreviated set of fields from DeploymentInfo that's returned in
// ListDeployments.
// [cleanup-wv-pre-release] 
message DeploymentListInfo {
    deployment.v1.Deployment deployment = 1;
    google.protobuf.Timestamp create_time = 2;
    // If this deployment is the current deployment of its deployment series.
    bool is_current = 3;
}


// A Worker Deployment Version (Version, for short) represents all workers of the same 
// code and config within a Deployment. Workers of the same Version are expected to 
// behave exactly the same so when executions move between them there are no 
// non-determinism issues.
// Worker Deployment Versions are created in Temporal server automatically when 
// their first poller arrives to the server.
// Each Version has a Workflow Versioning Mode which is chosen by the app
// developer. (see WorkflowVersioningMode enum documentation)
message WorkerDeploymentVersionInfo {
    WorkerDeploymentVersion version = 1;
    temporal.api.enums.v1.WorkflowVersioningMode workflow_versioning_mode = 2;
    google.protobuf.Timestamp create_time = 3;

    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
    // Nil if not current.
    google.protobuf.Timestamp current_since_time = 4;

    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
    // Nil if not ramping.
    google.protobuf.Timestamp ramping_since_time = 5;
    // Zero if the version is not ramping (i.e. `ramping_since_time` is nil).
    float ramp_percentage = 6;

    // All the Task Queues that have ever polled from this Deployment version.
    repeated VersionTaskQueueInfo task_queue_infos = 7;

    // Helps user determine when it is safe to decommission the workers of this
    // Version. Not present when the workflow is accepting new workflow executions because it's current or ramping.
    // Current limitations:
    // - Not supported for Unversioned mode.
    // - Periodically refreshed, may have delays up to few minutes (consult the
    //   last_checked_time value).
    // - Refreshed only when the version is neither current nor ramping AND 
    // the status is not "drained" yet.
    // - Once the status is changed to "drained", it is not changed until the Version
    //   becomes Current or Ramping again, at which time the drainage info is cleared.
    //   This means if the Version is "drained" but new workflows are sent to it via
    //   Pinned Versioning Override, the status does not account for those Pinned-override
    //   executions and remains "drained".
    VersionDrainageInfo drainage_info = 8;

    // Arbitrary user-provided metadata attached to this version.
    VersionMetadata metadata = 9;

    message VersionTaskQueueInfo {
        string name = 1;
        temporal.api.enums.v1.TaskQueueType type = 2;
    }
}

// Information about workflow drainage to help the user determine when it is safe
// to decommission a Version. Not present while the version is current or ramping.
message VersionDrainageInfo {
    // Set to DRAINING when accepts_new_executions first becomes false.
    // Set to DRAINED when no more open pinned workflows exist on this version.
    enums.v1.VersionDrainageStatus status = 1;
    // Last time the drainage status changed.
    google.protobuf.Timestamp last_changed_time = 2;
    // Last time the system checked for drainage of this version.
    google.protobuf.Timestamp last_checked_time = 3;
}

// A Worker Deployment (Deployment, for short) represents all workers serving 
// a shared set of Task Queues. Typically, a Deployment represents one service or 
// application.
// A Deployment contains multiple Deployment Versions, each representing a different 
// version of workers. (see documentation of WorkerDeploymentVersionInfo)
// Deployment records are created in Temporal server automatically when their 
// first poller arrives to the server.
message WorkerDeploymentInfo {
    // Identifies a Worker Deployment. Must be unique within the namespace.
    string name = 1;

    // Deployment Versions that are currently tracked in this Deployment. A DeploymentVersion will be
    // cleaned up automatically if all the following conditions meet:
    // - It does not receive new executions (see WorkerDeploymentVersionInfo.accepts_new_executions) 
    // - It has no active pollers (see WorkerDeploymentVersionInfo.pollers_status) 
    // - It is drained (see WorkerDeploymentVersionInfo.drainage_status) 
    repeated WorkerDeploymentVersionSummary version_summaries = 2;

    google.protobuf.Timestamp create_time = 3;

    RoutingInfo routing_info = 4;

    // Identity of the last client who modified the configuration of this Deployment. Set to the
    // `identity` value sent by APIs such as `SetWorkerDeploymentCurrentVersion` and
    // `SetWorkerDeploymentRampingVersion`.
    string last_modifier_identity = 5;

    message WorkerDeploymentVersionSummary {
        string version = 1;
        temporal.api.enums.v1.WorkflowVersioningMode workflow_versioning_mode = 2;
        google.protobuf.Timestamp create_time = 3;
        enums.v1.VersionDrainageStatus drainage_status = 4;
    }
}

message VersionMetadata {
    // Arbitrary key-values.
    map<string, temporal.api.common.v1.Payload> entries = 1;
}

message RoutingInfo {
    // Always present. Specifies what Deployment Version should should receive new workflow
    // executions and tasks of existing unversioned or AutoUpgrade workflows.
    // Can be one of the following:
    // - The Build ID of a Version of this Deployment that supports Versioning Behaviors (i.e. has
    // `WorkflowVersioningMode==VERSIONING_BEHAVIORS`.)
    // - Or, the "__unversioned__" special value, to represent all the unversioned workers (those
    // with `UNVERSIONED` (or unspecified) `WorkflowVersioningMode`.)
    // Note: Current Version is overridden by the Ramping Version for a portion of traffic when a ramp
    // is set (see `ramping_version`.)
    string current_version = 1;
    // When present, it means the traffic is being shifted from the Current Version to the Ramping
    // Version.
    // Must always be different from Current Version. Can be one of the following:
    // - The Build ID of a Version of this Deployment that supports Versioning Behaviors (i.e. has
    // `WorkflowVersioningMode==VERSIONING_BEHAVIORS`.)
    // - Or, the "__unversioned__" special value, to represent all the unversioned workers (those
    // with `UNVERSIONED` (or unspecified) `WorkflowVersioningMode`.)
    // Note that it is possible to ramp from one Version to another Version, or from unversioned
    // workers to a particular Version, or from a particular Version to unversioned workers.
    string ramping_version = 2;
    // Percentage of tasks that are routed to the Ramping Version instead of the Current Version.
    // Valid range: [0, 100]. A 100% value means the Ramping Version is receiving full traffic but
    // not yet "promoted" to be the Current Version, likely due to pending validations.
    float ramping_version_percentage = 3;
    // Last time current version was updated.
    google.protobuf.Timestamp current_version_update_time = 4;
    // Last time ramping version was updated.
    google.protobuf.Timestamp ramping_version_update_time = 5;
}
