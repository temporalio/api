syntax = "proto3";

package temporal.api.worker.v1;

option go_package = "go.temporal.io/api/worker/v1;worker";
option java_package = "io.temporal.api.worker.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option ruby_package = "Temporalio::Api::Worker::V1";
option csharp_namespace = "Temporalio.Api.Worker.V1";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "temporal/api/deployment/v1/message.proto";
import "temporal/api/enums/v1/common.proto";

message WorkerPollerInfo {

  int32 active_pollers = 1;

  google.protobuf.Timestamp last_successful_poll_time = 2;
}

message WorkerSlotsInfo {

  // Number of slots available for the worker to specific tasks.
  // May be -1 if the upper bound is not known.
  int32 current_slots_available = 1;
  // Number of slots used by the worker for specific tasks.
  int32 current_slots_used = 2;

  // Total number of tasks processed (completed both successfully and unsuccesfully, or any other way)
  // by the worker since the worker started. This is a cumulative counter.
  int32 total_processed_tasks = 3;
  // Total number of failed tasks processed by the worker so far.
  int32 total_failed_tasks = 4;

  // Number of tasks processed in since the last heartbeat from the worker.
  // This is a cumulative counter, and it is reset to 0 each time the worker sends a heartbeat.
  // Contains both successful and failed tasks.
  int32 processed_tasks_last_interval = 5;
  // Number of failed tasks processed since the last heartbeat from the worker.
  int32 failure_tasks_last_interval = 6;
}

// Holds everything needed to identify the worker host/process context
message WorkerHostInfo {
  // Worker host identifier.
  string host_name = 1;

  // Worker process identifier, should be unique for the host.
  string process_id = 2;

  // Worker identity, set by the client, may not be unique.
  // Usually host_name+(user group name)+process_id, but can be overwritten by the user.
  string worker_identity = 3;
}

// Worker info message, contains information about the worker and its current state.
// All information is provided by the worker itself.
// (-- api-linter: core::0140::prepositions=disabled
//     aip.dev/not-precedent: Removing those words make names less clear. --)
message WorkerInfo {
  // Worker identifier, should be unique for the namespace.
  // It is distinct from worker identity, which is not necessarily namespace-unique.
  string worker_instance_key = 1;

  // Worker host information.
  WorkerHostInfo host_info = 2;

  // Task queue this worker is polling for tasks.
  string task_queue = 3;

  temporal.api.deployment.v1.WorkerDeploymentVersion deployment_version = 4;

  string sdk_name = 5;
  string sdk_version = 6;

  // Worker status. Defined by SDK.
  temporal.api.enums.v1.WorkerStatus status = 7;

  // Worker start time.
  // It can be used to determine worker uptime. (current time - start time)
  google.protobuf.Timestamp start_time = 8;

  // Last heartbeat time, coming from the worker. Worker should set it to "now".
  google.protobuf.Timestamp last_heartbeat_time = 9;
  // Elapsed time since the last heartbeat from the worker.
  google.protobuf.Duration elapsed_since_last_heartbeat = 10;

  WorkerSlotsInfo workflow_task_slots_info = 11;
  WorkerSlotsInfo activity_task_slots_info = 12;
  WorkerSlotsInfo nexus_task_slots_info = 13;
  WorkerSlotsInfo local_activity_slots_info = 14;

  WorkerPollerInfo workflow_poller_info = 15;
  WorkerPollerInfo workflow_sticky_poller_info = 16;
  WorkerPollerInfo activity_poller_info = 17;
  WorkerPollerInfo nexus_poller_info = 18;

  float current_host_cpu_usage = 19;
  int64 current_host_mem_usage = 20;

  // A Workflow Task found a cached Workflow Execution to run against.
  int32 total_sticky_cache_hit = 21;
  // A Workflow Task did not find a cached Workflow execution to run against.
  int32 total_sticky_cache_miss = 22;
  // Current cache size, expressed in number of Workflow Executions.
  int32 current_sticky_cache_size = 23;
}
