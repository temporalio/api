// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.decision.v1;

option go_package = "go.temporal.io/temporal-proto/decision/v1;decision";
option java_package = "io.temporal.proto.decision.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";

import "temporal/enums/v1/workflow.proto";
import "temporal/enums/v1/decision_type.proto";
import "temporal/common/v1/message.proto";
import "temporal/failure/v1/message.proto";
import "temporal/tasklist/v1/message.proto";

message ScheduleActivityTaskDecisionAttributes {
    string activity_id = 1;
    temporal.common.v1.ActivityType activity_type = 2;
    string namespace = 3;
    temporal.tasklist.v1.TaskList task_list = 4;
    temporal.common.v1.Header header = 5;
    temporal.common.v1.Payloads input = 6;
    // Indicates how long the caller is willing to wait for an activity completion.
    // Limits for how long retries are happening. Either this or startToCloseTimeoutSeconds is required.
    // When not specified defaults to the workflow execution timeout.
    int32 schedule_to_close_timeout_seconds = 7;
    // Limits time an activity task can stay in a task queue before a worker picks it up.
    // This timeout is always non retryable as all a retry would achieve is to put it back into the same queue.
    // Defaults to scheduleToCloseTimeoutSeconds or workflow execution timeout if not specified.
    int32 schedule_to_start_timeout_seconds = 8;
    // Maximum time an activity is allowed to execute after a pick up by a worker.
    // This timeout is always retryable. Either this or scheduleToCloseTimeoutSeconds is required.
    int32 start_to_close_timeout_seconds = 9;
    // Maximum time between successful worker heartbeats.
    // Optional. By default no heartbeat is required.
    int32 heartbeat_timeout_seconds = 10;
    // Activity retry policy. Note that activity is retried by default according to a default retry policy.
    // To disable retries provide a retry policy with maximumAttempts equals to 1.
    // The retries happen up to scheduleToCloseTimeout.
    temporal.common.v1.RetryPolicy retry_policy = 11;
}

message RequestCancelActivityTaskDecisionAttributes {
    int64 scheduled_event_id = 1;
}

message StartTimerDecisionAttributes {
    string timer_id = 1;
    int64 start_to_fire_timeout_seconds = 2;
}

message CompleteWorkflowExecutionDecisionAttributes {
    temporal.common.v1.Payloads result = 1;
}

message FailWorkflowExecutionDecisionAttributes {
    temporal.failure.v1.Failure failure = 1;
}

message CancelTimerDecisionAttributes {
    string timer_id = 1;
}

message CancelWorkflowExecutionDecisionAttributes {
    temporal.common.v1.Payloads details = 1;
}

message RequestCancelExternalWorkflowExecutionDecisionAttributes {
    string namespace = 1;
    string workflow_id = 2;
    string run_id = 3;
    string control = 4;
    bool child_workflow_only = 5;
}

message SignalExternalWorkflowExecutionDecisionAttributes {
    string namespace = 1;
    temporal.common.v1.WorkflowExecution execution = 2;
    string signal_name = 3;
    temporal.common.v1.Payloads input = 4;
    string control = 5;
    bool child_workflow_only = 6;
}

message UpsertWorkflowSearchAttributesDecisionAttributes {
    temporal.common.v1.SearchAttributes search_attributes = 1;
}

message RecordMarkerDecisionAttributes {
    string marker_name = 1;
    map<string, temporal.common.v1.Payloads> details = 2;
    temporal.common.v1.Header header = 3;
    temporal.failure.v1.Failure failure = 4;
}

message ContinueAsNewWorkflowExecutionDecisionAttributes {
    temporal.common.v1.WorkflowType workflow_type = 1;
    temporal.tasklist.v1.TaskList task_list = 2;
    temporal.common.v1.Payloads input = 3;
    // workflowExecutionTimeout is omitted as it shouldn'be overridden from within a workflow
    // Timeout of a single workflow run
    int32 workflow_run_timeout_seconds = 4;
    // Timeout of a single workflow task
    int32 workflow_task_timeout_seconds = 5;
    int32 backoff_start_interval_in_seconds = 6;
    temporal.common.v1.RetryPolicy retry_policy = 7;
    temporal.enums.v1.ContinueAsNewInitiator initiator = 8;
    temporal.failure.v1.Failure failure = 9;
    temporal.common.v1.Payloads last_completion_result = 10;
    string cron_schedule = 11;
    temporal.common.v1.Header header = 12;
    temporal.common.v1.Memo memo = 13;
    temporal.common.v1.SearchAttributes search_attributes = 14;
}

message StartChildWorkflowExecutionDecisionAttributes {
    string namespace = 1;
    string workflow_id = 2;
    temporal.common.v1.WorkflowType workflow_type = 3;
    temporal.tasklist.v1.TaskList task_list = 4;
    temporal.common.v1.Payloads input = 5;
    // Total workflow execution timeout including retries and continue as new
    int32 workflow_execution_timeout_seconds = 6;
    // Timeout of a single workflow run
    int32 workflow_run_timeout_seconds = 7;
    // Timeout of a single workflow task
    int32 workflow_task_timeout_seconds = 8;
    temporal.enums.v1.ParentClosePolicy parent_close_policy = 9;
    string control = 10;
    temporal.enums.v1.WorkflowIdReusePolicy workflow_id_reuse_policy = 11;
    temporal.common.v1.RetryPolicy retry_policy = 12;
    string cron_schedule = 13;
    temporal.common.v1.Header header = 14;
    temporal.common.v1.Memo memo = 15;
    temporal.common.v1.SearchAttributes search_attributes = 16;
}

message Decision {
    temporal.enums.v1.DecisionType decision_type = 1;
    oneof attributes {
        ScheduleActivityTaskDecisionAttributes schedule_activity_task_decision_attributes = 2;
        StartTimerDecisionAttributes start_timer_decision_attributes = 3;
        CompleteWorkflowExecutionDecisionAttributes complete_workflow_execution_decision_attributes = 4;
        FailWorkflowExecutionDecisionAttributes fail_workflow_execution_decision_attributes = 5;
        RequestCancelActivityTaskDecisionAttributes request_cancel_activity_task_decision_attributes = 6;
        CancelTimerDecisionAttributes cancel_timer_decision_attributes = 7;
        CancelWorkflowExecutionDecisionAttributes cancel_workflow_execution_decision_attributes = 8;
        RequestCancelExternalWorkflowExecutionDecisionAttributes request_cancel_external_workflow_execution_decision_attributes = 9;
        RecordMarkerDecisionAttributes record_marker_decision_attributes = 10;
        ContinueAsNewWorkflowExecutionDecisionAttributes continue_as_new_workflow_execution_decision_attributes = 11;
        StartChildWorkflowExecutionDecisionAttributes start_child_workflow_execution_decision_attributes = 12;
        SignalExternalWorkflowExecutionDecisionAttributes signal_external_workflow_execution_decision_attributes = 13;
        UpsertWorkflowSearchAttributesDecisionAttributes upsert_workflow_search_attributes_decision_attributes = 14;
    }
}
