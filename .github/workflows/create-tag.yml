name: "Create a tag"

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to be tagged"
        required: true
        default: master
      tag:
        description: "Tag for new version (v1.23.4)"
        required: true
      create_release:
        description: "Create release and set as latest"
        type: boolean
        default: true
      base_tag:
        description: "Base tag to generate commit list for release notes"
        required: false
      skip_sdk_check:
        description: "Skip sdk-go compatibility check"
        type: boolean

jobs:
  prepare-inputs:
    name: "Prepare inputs"
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.new_version.output.tag }}
      api_commit_sha: ${{ steps.new_version.output.commit_sha }}
      api_go_commit_sha: ${{ steps.pin_api_go.output.api_go_commit_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0
          fetch-tags: true

      - name: Prepare new version string
        id: new_version
        env:
          TAG: ${{ github.event.inputs.tag }}
        run: |
          if [[ "${TAG}" =~ ^v.* ]]; then
              echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          else
              echo "tag=v${TAG}" >> "$GITHUB_OUTPUT"
          fi
          echo "commit_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Validate inputs
        env:
          BRANCH: ${{ github.event.inputs.branch }}
          TAG: ${{ steps.new_version.outputs.tag }}
          CREATE_RELEASE: ${{ github.event.inputs.create_release }}
          BASE_TAG: ${{ github.event.inputs.base_tag }}
        run: |
          if [[ -n "$(git tag -l "$TAG")" && "$(git rev-parse "$TAG")" != "$(git rev-parse HEAD)" ]]; then
            echo "::error::Tag already exists and it doesn't reference current HEAD of branch $BRANCH"
            exit 1
          fi

          if [[ "$CREATE_RELEASE" == "true" ]]; then
            if [[ -z "$BASE_TAG" || -z "$(git tag -l "$BASE_TAG")" ]]; then
              echo "::error::Base tag not specified or does not exist"
              exit 1
            fi
          fi

      - name: Pin api-go commit sha
        id: pin_api_go
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: ${{ github.event.inputs.branch }}
        run: |
          API_GO_COMMIT_SHA=$(gh api /repos/temporalio/api-go/branches/$BRANCH --jq '.commit.sha')
          echo "api_go_commit_sha=$API_GO_COMMIT_SHA" >> "$GITHUB_OUTPUT"

  check-compatibility-sdk-go:
    needs: prepare-inputs
    if: ${{ github.event.inputs.skip_sdk_check == false || github.event.inputs.skip_sdk_check == 'false' }}
    uses: temporalio/api-go/.github/workflows/check-sdk-compat.yml@master
    with:
      sdk_commit: latest
      api_commit: ${{ needs.prepare-inputs.outputs.api_go_commit_sha }}

  create-tag:
    name: "Create a tag"
    needs: [prepare-inputs, check-compatibility-sdk-go]
    if: |
      !cancelled() &&
      needs.prepare-inputs.result == 'success' &&
      contains(fromJSON('["success", "skipped"]'), needs.check-compatibility-sdk-go.result)
    runs-on: ubuntu-latest

    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.TEMPORAL_CICD_APP_ID }}
          private-key: ${{ secrets.TEMPORAL_CICD_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-inputs.outputs.commit_sha }}
          token: ${{ steps.generate_token.outputs.token }}
          persist-credentials: true
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Github credentials
        run: |
          git config --local user.name 'Temporal Data'
          git config --local user.email 'commander-data@temporal.io'

      - name: Create and push tag
        env:
          TAG: ${{ needs.prepare-inputs.outputs.tag }}
        run: |
          if [[ -z "$(git tag -l "$TAG")" ]]; then
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Create release
        if: ${{ github.event.inputs.create_release == true || github.event.inputs.create_release == 'true' }}
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          TAG: ${{ needs.prepare-inputs.outputs.tag }}
          BASE_TAG: ${{ github.event.inputs.base_tag }}
        run: |
          gh repo set-default ${{ github.repository }}
          gh release create "$TAG" --verify-tag --latest --generate-notes --notes-start-tag "$BASE_TAG"

  release-api-go:
    needs: create-tag
    if: |
      !cancelled() &&
      (needs.create-tag.result == 'success') &&
      (github.event.inputs.create_release == true || github.event.inputs.create_release == 'true')
    uses: temporalio/api-go/.github/workflows/create-tag.yml@master
    with:
      ref: ${{ needs.prepare-inputs.outputs.api_go_commit_sha }}
      tag: ${{ needs.prepare-inputs.outputs.tag }}
      create_release: true
      base_tag: ${{ github.event.inputs.base_tag }}
      skip_sdk_check: true
    secrets: inherit
