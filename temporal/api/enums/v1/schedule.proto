// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.enums.v1;

option go_package = "go.temporal.io/api/enums/v1;enums";
option java_package = "io.temporal.api.enums.v1";
option java_multiple_files = true;
option java_outer_classname = "ScheduleProto";
option ruby_package = "Temporal::Api::Enums::V1";
option csharp_namespace = "Temporal.Api.Enums.V1";


// ScheduleOverlapPolicy controls what happens when a workflow would be started
// by a schedule, and is already running.
enum ScheduleOverlapPolicy {
    OVERLAP_UNSPECIFIED = 0;
    // OVERLAP_SKIP (default) means don't start anything. When the workflow
    // completes, the next scheduled event after that time will be considered.
    OVERLAP_SKIP = 1;
    // OVERLAP_BUFFER_ONE means start the workflow again soon as the current one
    // completes, but only buffer one start in this way. If another start is
    // supposed to happen when the workflow is running, and one is already
    // buffered, then only the first one will be started after the running
    // workflow finishes.
    OVERLAP_BUFFER_ONE = 2;
    // OVERLAP_BUFFER_ALL means buffer up any number of starts to all happen
    // sequentially immediately after the running workflow completes.
    OVERLAP_BUFFER_ALL = 3;
    // OVERLAP_CANCEL_OTHER means that if there is another workflow running,
    // cancel it, and start the new one after the old one completes
    // cancellation.
    OVERLAP_CANCEL_OTHER = 4;
    // OVERLAP_TERMINATE_OTHER means that if there is another workflow running,
    // terminate it and start the new one immediately.
    OVERLAP_TERMINATE_OTHER = 5;
    // OVERLAP_ALLOW_ALL means start any number of concurrent workflows. This
    // means that all runs must have unique workflow ids. To allow this, the
    // workflow id in the start request has a start time appended to it (always
    // in this mode, whether overlaps happen in reality or not).
    OVERLAP_ALLOW_ALL = 6;
}
