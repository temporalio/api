// The MIT License
//
// Copyright (c) 2023 Temporal Technologies Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.nexus.v1;

option go_package = "go.temporal.io/api/nexus/v1;nexus";
option java_package = "io.temporal.api.nexus.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option ruby_package = "Temporalio::Api::Nexus::V1";
option csharp_namespace = "Temporalio.Api.Nexus.V1";

import "google/protobuf/struct.proto";
import "temporal/api/common/v1/message.proto";

// A general purpose failure message.
// See: https://github.com/nexus-rpc/api/blob/main/SPEC.md#failure
message Failure {
    string message = 1;
    map<string, string> metadata = 2;
    google.protobuf.Value details = 3;
}

message HandlerError {
    // TODO: link to the Nexus spec once these error types are published.
    string error_type = 1;
    Failure failure = 2;
}

message UnsuccessfulOperationError {
    // See https://pkg.go.dev/github.com/nexus-rpc/sdk-go@v0.0.1/nexus#OperationState
    // TODO: this should be in the API SPEC.
    string operation_state = 1;
    Failure failure = 2;
}

// A request to start an operation.
message StartOperationRequest {
    // Type of operation to start.
    string operation = 1;
    // A request ID that can be used as an idempotentency key.
    string request_id = 2;
    // Callback URL to call upon completion if the started operation is async.
    string callback = 3;
    // Full request body from the incoming HTTP request.
    temporal.api.common.v1.Payload payload = 4;
}

// A request to cancel an operation.
message CancelOperationRequest {
    // Type of operation to cancel.
    string operation = 1;
    // Operation ID as originally generated by a Handler.
    string operation_id = 2;
}

// A Nexus request.
message Request {
    // Headers extracted from the original request in the Temporal frontend.
    // When using Nexus over HTTP, this includes the request's HTTP headers ignoring multiple values.
    map<string, string> header = 1;
    oneof variant {
        StartOperationRequest start_operation = 2;
        CancelOperationRequest cancel_operation = 3;
    }
}

// Response variant for StartOperationRequest.
message StartOperationResponse {
    // An operation completed successfully.
    message Sync {
        temporal.api.common.v1.Payload payload = 1;
    }

    // The operation will complete asynchronously.
    // The returned ID can be used to reference this operation.
    message Async {
        string operation_id = 1;
    }

    oneof variant {
        Sync sync_success = 1;
        Async async_success = 2;
        // The operation completed unsuccessfully (failed or canceled).
        UnsuccessfulOperationError operation_error = 3;
    }
}

// Response variant for CancelOperationRequest.
message CancelOperationResponse {
}

// A response indicating that the handler has successfully processed a request.
message Response {
    // Variant must correlate to the corresponding Request's variant.
    oneof variant {
        StartOperationResponse start_operation = 1;
        CancelOperationResponse cancel_operation = 2;
    }
}
