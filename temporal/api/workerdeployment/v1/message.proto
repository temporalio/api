// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.workerdeployment.v1;

option go_package = "go.temporal.io/api/workerdeployment/v1;workerdeployment";
option java_package = "io.temporal.api.workerdeployment.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option ruby_package = "Temporalio::Api::WorkerDeployment::V1";
option csharp_namespace = "Temporalio.Api.WorkerDeployment.V1";

import "google/protobuf/timestamp.proto";

import "temporal/api/enums/v1/task_queue.proto";
import "temporal/api/common/v1/message.proto";

// A Worker Deployment Version (Version, for short) represents all workers of the same 
// code and config within a Deployment. Workers of the same Version are expected to 
// behave exactly the same so when executions move between them there are no 
// non-determinism issues.
// Worker Deployment Versions are created in Temporal server automatically when 
// their first poller arrives to the server.
// Each Version has a Workflow Versioning Mode which is chosen by the app
// developer. (see WorkflowVersioningMode enum documentation)
message WorkerDeploymentVersionInfo {
    // Identifies a Worker Deployment Version. Must be unique within the namespace.
    // Same ID cannot be used in multiple Deployments.
    // In some contexts, such as Reset-by-build-id, version might be used
    // as "Build ID".
    string version = 1;

    // Each Worker Version belongs to exactly one Deployment.
    string deployment_name = 2;

    google.protobuf.Timestamp create_time = 3;
    // All the Task Queues
    repeated WorkerBuildTaskQueueInfo task_queue_infos = 4;
    // Arbitrary user-provided metadata attached to this Build.
    WorkerBuildMetadata metadata = 5;
    // Aggregated status for all Task Queues being polled in this Build.
    PollersStatus aggregated_pollers_status = 6;


    message WorkerBuildTaskQueueInfo {
        string name = 1;
        temporal.api.enums.v1.TaskQueueType type = 2;
        PollersStatus pollers_status = 3;
    }
}

message WorkerBuildMetadata {
    // Arbitrary key-value pairs.
    map<string, temporal.api.common.v1.Payload> entries = 1;
}

// Pollers' status information. Depending on the context, this may be relevant to 
// one or more Task Queues and one or more Builds.
message PollersStatus {
    // True if there are active pollers for the relevant Task Queue(s) in the 
    // relevant Build(s).
    bool has_pollers = 1;
    // When server saw the first poller for (any of) the relevant Task Queue(s) in 
    // (any of) the relevant Build(s).
    google.protobuf.Timestamp poll_start_time = 2;
    // Only present if has_poller is false. This is approximate and can be off by 
    // a few minutes.
    google.protobuf.Timestamp poll_stop_time = 3;
}
