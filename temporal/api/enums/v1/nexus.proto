syntax = "proto3";

package temporal.api.enums.v1;

option go_package = "go.temporal.io/api/enums/v1;enums";
option java_package = "io.temporal.api.enums.v1";
option java_multiple_files = true;
option java_outer_classname = "NexusProto";
option ruby_package = "Temporalio::Api::Enums::V1";
option csharp_namespace = "Temporalio.Api.Enums.V1";

// NexusHandlerErrorRetryBehavior allows nexus handlers to explicity set the retry behavior of a HandlerError. If not
// specified, retry behavior is determined from the error type. For example internal errors are not retryable by default
// unless specified otherwise.
enum NexusHandlerErrorRetryBehavior {
    NEXUS_HANDLER_ERROR_RETRY_BEHAVIOR_UNSPECIFIED = 0;
    // A handler error is explicitly marked as retryable.
    NEXUS_HANDLER_ERROR_RETRY_BEHAVIOR_RETRYABLE = 1;
    // A handler error is explicitly marked as non-retryable.
    NEXUS_HANDLER_ERROR_RETRY_BEHAVIOR_NON_RETRYABLE = 2;
}

// Defines whether to allow re-using a caller operation ref from a previously *completed* Nexus operation.
// If the request is denied, the server returns a `NexusOperationAlreadyStartedFailure` error.
//
// See `NexusCallerOperationRefConflictPolicy` for handling caller operation ref duplication with a *running* operation.
enum NexusCallerOperationRefReusePolicy {
  NEXUS_CALLER_OPERATION_REF_REUSE_POLICY_UNSPECIFIED = 0;
  // Allow starting an operation using the same caller operation reference.
  NEXUS_CALLER_OPERATION_REF_REUSE_POLICY_ALLOW_DUPLICATE = 1;
  // Allow starting an operation using the same caller operation ref, only when the last
  // operation's final state is one of [terminated, cancelled, timed out, failed].
  NEXUS_CALLER_OPERATION_REF_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY = 2;
  // Do not permit re-use of the caller operation ref for this operation. Future start operation requests
  // could potentially change the policy, allowing re-use of the caller operation ref.
  NEXUS_CALLER_OPERATION_REF_REUSE_POLICY_REJECT_DUPLICATE = 3;
}

// Defines what to do when trying to start a Nexus operation with the same caller operation ref as a *running* operation.
// Note that it is *never* valid to have two actively running instances of the same caller operation ref.
//
// See `NexusCallerOperationRefReusePolicy` for handling operation ref duplication with a *completed* operation.
enum NexusCallerOperationRefConflictPolicy {
  NEXUS_CALLER_OPERATION_REF_CONFLICT_POLICY_UNSPECIFIED = 0;
  // Don't start a new operation; instead return `NexusOperationAlreadyStartedFailure`.
  NEXUS_CALLER_OPERATION_REF_CONFLICT_POLICY_FAIL = 1;
  // Don't start a new operation; instead return an operation handle for the running operation.
  NEXUS_CALLER_OPERATION_REF_CONFLICT_POLICY_USE_EXISTING = 2;
  // Terminate the running operation before starting a new one.
  NEXUS_CALLER_OPERATION_REF_CONFLICT_POLICY_TERMINATE_EXISTING = 3;
}
