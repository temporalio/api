// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package enums;

option go_package = "go.temporal.io/temporal-proto/enums";
option java_package = "io.temporal.proto.enums";
option java_multiple_files = true;

enum WorkflowIdReusePolicy {
    // Allow start a workflow execution using the same workflow Id, when workflow not running.
    WorkflowIdReusePolicyAllowDuplicate = 0;
     // Allow start a workflow execution using the same workflow Id, when workflow not running, and the last execution close state is in
     // [terminated, cancelled, timed out, failed].
    WorkflowIdReusePolicyAllowDuplicateFailedOnly = 1;
    // Do not allow start a workflow execution using the same workflow Id at all.
    WorkflowIdReusePolicyRejectDuplicate = 2;
}

enum NamespaceStatus {
    NamespaceStatusRegistered = 0;
    NamespaceStatusDeprecated = 1;
    NamespaceStatusDeleted = 2;
}

enum TimeoutType {
    TimeoutTypeStartToClose = 0;
    TimeoutTypeScheduleToStart = 1;
    TimeoutTypeScheduleToClose = 2;
    TimeoutTypeHeartbeat = 3;
}
enum ParentClosePolicy {
    ParentClosePolicyAbandon = 0;
    ParentClosePolicyRequestCancel = 1;
    ParentClosePolicyTerminate = 2;
}

// Whenever this list of decision is changed do change the function shouldBufferEvent in mutableStateBuilder.go
// to make sure to do the correct event ordering.
enum DecisionType {
    DecisionTypeScheduleActivityTask = 0;
    DecisionTypeRequestCancelActivityTask = 1;
    DecisionTypeStartTimer = 2;
    DecisionTypeCompleteWorkflowExecution = 3;
    DecisionTypeFailWorkflowExecution = 4;
    DecisionTypeCancelTimer = 5;
    DecisionTypeCancelWorkflowExecution = 6;
    DecisionTypeRequestCancelExternalWorkflowExecution = 7;
    DecisionTypeRecordMarker = 8;
    DecisionTypeContinueAsNewWorkflowExecution = 9;
    DecisionTypeStartChildWorkflowExecution = 10;
    DecisionTypeSignalExternalWorkflowExecution = 11;
    DecisionTypeUpsertWorkflowSearchAttributes = 12;
}

enum EventType {
    EventTypeWorkflowExecutionStarted = 0;
    EventTypeWorkflowExecutionCompleted = 1;
    EventTypeWorkflowExecutionFailed = 2;
    EventTypeWorkflowExecutionTimedOut = 3;
    EventTypeDecisionTaskScheduled = 4;
    EventTypeDecisionTaskStarted = 5;
    EventTypeDecisionTaskCompleted = 6;
    EventTypeDecisionTaskTimedOut = 7;
    EventTypeDecisionTaskFailed = 8;
    EventTypeActivityTaskScheduled = 9;
    EventTypeActivityTaskStarted = 10;
    EventTypeActivityTaskCompleted = 11;
    EventTypeActivityTaskFailed = 12;
    EventTypeActivityTaskTimedOut = 13;
    EventTypeActivityTaskCancelRequested = 14;
    EventTypeRequestCancelActivityTaskFailed = 15;
    EventTypeActivityTaskCanceled = 16;
    EventTypeTimerStarted = 17;
    EventTypeTimerFired = 18;
    EventTypeCancelTimerFailed = 19;
    EventTypeTimerCanceled = 20;
    EventTypeWorkflowExecutionCancelRequested = 21;
    EventTypeWorkflowExecutionCanceled = 22;
    EventTypeRequestCancelExternalWorkflowExecutionInitiated = 23;
    EventTypeRequestCancelExternalWorkflowExecutionFailed = 24;
    EventTypeExternalWorkflowExecutionCancelRequested = 25;
    EventTypeMarkerRecorded = 26;
    EventTypeWorkflowExecutionSignaled = 27;
    EventTypeWorkflowExecutionTerminated = 28;
    EventTypeWorkflowExecutionContinuedAsNew = 29;
    EventTypeStartChildWorkflowExecutionInitiated = 30;
    EventTypeStartChildWorkflowExecutionFailed = 31;
    EventTypeChildWorkflowExecutionStarted = 32;
    EventTypeChildWorkflowExecutionCompleted = 33;
    EventTypeChildWorkflowExecutionFailed = 34;
    EventTypeChildWorkflowExecutionCanceled = 35;
    EventTypeChildWorkflowExecutionTimedOut = 36;
    EventTypeChildWorkflowExecutionTerminated = 37;
    EventTypeSignalExternalWorkflowExecutionInitiated = 38;
    EventTypeSignalExternalWorkflowExecutionFailed = 39;
    EventTypeExternalWorkflowExecutionSignaled = 40;
    EventTypeUpsertWorkflowSearchAttributes = 41;
}
enum DecisionTaskFailedCause {
    DecisionTaskFailedCauseUnhandledDecision = 0;
    DecisionTaskFailedCauseBadScheduleActivityAttributes = 1;
    DecisionTaskFailedCauseBadRequestCancelActivityAttributes = 2;
    DecisionTaskFailedCauseBadStartTimerAttributes = 3;
    DecisionTaskFailedCauseBadCancelTimerAttributes = 4;
    DecisionTaskFailedCauseBadRecordMarkerAttributes = 5;
    DecisionTaskFailedCauseBadCompleteWorkflowExecutionAttributes = 6;
    DecisionTaskFailedCauseBadFailWorkflowExecutionAttributes = 7;
    DecisionTaskFailedCauseBadCancelWorkflowExecutionAttributes = 8;
    DecisionTaskFailedCauseBadRequestCancelExternalWorkflowExecutionAttributes = 9;
    DecisionTaskFailedCauseBadContinueAsNewAttributes = 10;
    DecisionTaskFailedCauseStartTimerDuplicateId = 11;
    DecisionTaskFailedCauseResetStickyTasklist = 12;
    DecisionTaskFailedCauseWorkflowWorkerUnhandledFailure = 13;
    DecisionTaskFailedCauseBadSignalWorkflowExecutionAttributes = 14;
    DecisionTaskFailedCauseBadStartChildExecutionAttributes = 15;
    DecisionTaskFailedCauseForceCloseDecision = 16;
    DecisionTaskFailedCauseFailoverCloseDecision = 17;
    DecisionTaskFailedCauseBadSignalInputSize = 18;
    DecisionTaskFailedCauseResetWorkflow = 19;
    DecisionTaskFailedCauseBadBinary = 20;
    DecisionTaskFailedCauseScheduleActivityDuplicateId = 21;
    DecisionTaskFailedCauseBadSearchAttributes = 22;
}
enum CancelExternalWorkflowExecutionFailedCause {
    CancelExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution = 0;
}

enum SignalExternalWorkflowExecutionFailedCause {
    SignalExternalWorkflowExecutionFailedCauseUnknownExternalWorkflowExecution= 0;
}

enum ChildWorkflowExecutionFailedCause {
    ChildWorkflowExecutionFailedCauseWorkflowAlreadyRunning = 0;
}

enum WorkflowExecutionStatus {
    WorkflowExecutionStatusUnknown = 0;
    WorkflowExecutionStatusRunning = 1;
    WorkflowExecutionStatusCompleted = 2;
    WorkflowExecutionStatusFailed = 3;
    WorkflowExecutionStatusCanceled = 4;
    WorkflowExecutionStatusTerminated = 5;
    WorkflowExecutionStatusContinuedAsNew = 6;
    WorkflowExecutionStatusTimedOut = 7;
}

enum QueryTaskCompletedType {
    QueryTaskCompletedTypeCompleted = 0;
    QueryTaskCompletedTypeFailed = 1;
}

enum QueryResultType {
    QueryResultTypeAnswered = 0;
    QueryResultTypeFailed = 1;
}

enum PendingActivityState {
    PendingActivityStateScheduled = 0;
    PendingActivityStateStarted = 1;
    PendingActivityStateCancelRequested = 2;
}

enum HistoryEventFilterType {
    HistoryEventFilterTypeAllEvent = 0;
    HistoryEventFilterTypeCloseEvent = 1;
}

enum TaskListKind {
    TaskListKindNormal = 0;
    TaskListKindSticky = 1;
}

enum ArchivalStatus {
    ArchivalStatusDefault = 0;
    ArchivalStatusDisabled = 1;
    ArchivalStatusEnabled = 2;
}

enum IndexedValueType {
    IndexedValueTypeString = 0;
    IndexedValueTypeKeyword = 1;
    IndexedValueTypeInt = 2;
    IndexedValueTypeDouble = 3;
    IndexedValueTypeBool = 4;
    IndexedValueTypeDatetime = 5;
}

enum EncodingType {
    EncodingTypeProto3 = 0;
    EncodingTypeJSON = 1;
}

enum QueryRejectCondition {
    // None indicates that query should not be rejected.
    QueryRejectConditionNone = 0;
    // NotOpen indicates that query should be rejected if workflow is not open.
    QueryRejectConditionNotOpen = 1;
    // NotCompletedCleanly indicates that query should be rejected if workflow did not complete cleanly.
    QueryRejectConditionNotCompletedCleanly = 2;
}

enum QueryConsistencyLevel {
    // Eventual indicates that query should be eventually consistent.
    QueryConsistencyLevelEventual = 0;
    // Strong indicates that any events that came before query should be reflected in workflow state before running query.
    QueryConsistencyLevelStrong = 1;
}

enum ContinueAsNewInitiator {
    ContinueAsNewInitiatorDecider = 0;
    ContinueAsNewInitiatorRetryPolicy = 1;
    ContinueAsNewInitiatorCronSchedule = 2;
}

enum TaskListType {
    // Decision type of task list.
    TaskListTypeDecision = 0;
    // Activity type of task list.
    TaskListTypeActivity = 1;
}

enum ReplicationTaskType {
    ReplicationTaskTypeNamespace = 0;
    ReplicationTaskTypeHistory = 1;
    ReplicationTaskTypeSyncShardStatus = 2;
    ReplicationTaskTypeSyncActivity = 3;
    ReplicationTaskTypeHistoryMetadata = 4;
    ReplicationTaskTypeHistoryV2 = 5;
}

enum NamespaceOperation {
    NamespaceOperationCreate = 0;
    NamespaceOperationUpdate = 1;
}

enum MessageType {
    MessageTypeIndex = 0;
    MessageTypeDelete = 1;
}

enum FieldType {
    FieldTypeString = 0;
    FieldTypeInt = 1;
    FieldTypeBool = 2;
    FieldTypeBinary =3;
}

enum DLQType {
    DLQTypeReplication = 0;
    DLQTypeNamespace = 1;
}

// This is only used for internal matchingservice requests
// TaskSource is the source from which a task was produced
enum TaskSource {
    TaskSourceUnknown = 0;
    TaskSourceHistory = 1;    // Task produced by history service
    TaskSourceDbBacklog = 2; // Task produced from matching db backlog
}

// Used in Checksum
enum ChecksumFlavor {
    ChecksumFlavorUnknown = 0;
    ChecksumFlavorIEEECRC32OverProto3Binary = 1;
}
