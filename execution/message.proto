// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package execution;

option go_package = "go.temporal.io/temporal-proto/execution";
option java_package = "io.temporal.proto.execution";
option java_multiple_files = true;

import "execution/enum.proto";
import "common/enum.proto";
import "common/message.proto";
import "tasklist/message.proto";
import "google/protobuf/wrappers.proto";

message WorkflowExecution {
    string workflowId = 1;
    string runId = 2;
}

message WorkflowExecutionInfo {
    WorkflowExecution execution = 1;
    common.WorkflowType type = 2;
    google.protobuf.Int64Value startTime = 3;
    google.protobuf.Int64Value closeTime = 4;
    WorkflowExecutionStatus status = 5;
    int64 historyLength = 6;
    string parentNamespaceId = 7;
    WorkflowExecution parentExecution = 8;
    int64 executionTime = 9;
    common.Memo memo = 10;
    common.SearchAttributes searchAttributes = 11;
    ResetPoints autoResetPoints = 12;
    string TaskList = 13;
}

message WorkflowExecutionConfiguration {
    tasklist.TaskList taskList = 1;
    int32 executionStartToCloseTimeoutSeconds = 2;
    int32 taskStartToCloseTimeoutSeconds = 3;
}

message PendingActivityInfo {
    string activityId = 1;
    common.ActivityType activityType = 2;
    PendingActivityState state = 3;
    bytes heartbeatDetails = 4;
    int64 lastHeartbeatTimestamp = 5;
    int64 lastStartedTimestamp = 6;
    int32 attempt = 7;
    int32 maximumAttempts = 8;
    int64 scheduledTimestamp = 9;
    int64 expirationTimestamp = 10;
    string lastFailureReason = 11;
    string lastWorkerIdentity = 12;
    bytes lastFailureDetails = 13;
}

message PendingChildExecutionInfo {
    string workflowId = 1;
    string runId = 2;
    string workflowTypName = 3;
    int64 initiatedId = 4;
    common.ParentClosePolicy parentClosePolicy = 5;
}

message ResetPoints {
    repeated ResetPointInfo points = 1;
}

message ResetPointInfo {
    string binaryChecksum = 1;
    string runId = 2;
    int64 firstDecisionCompletedId = 3;
    int64 createdTimeNano = 4;
    // The time that the run is deleted due to retention.
    int64 expiringTimeNano = 5;
    // false if the reset point has pending childWFs/reqCancels/signalExternals.
    bool resettable = 6;
}

