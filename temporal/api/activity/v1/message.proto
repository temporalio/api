// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.activity.v1;

option go_package = "go.temporal.io/api/activity/v1;activity";
option java_package = "io.temporal.api.activity.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option ruby_package = "Temporalio::Api::Activity::V1";
option csharp_namespace = "Temporalio.Api.Activity.V1";

import "temporal/api/common/v1/message.proto";
import "temporal/api/taskqueue/v1/message.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";

message Timeouts {
  // Indicates how long the caller is willing to wait for activity completion. The "schedule" time
  // is when the activity is initially scheduled, not when the most recent retry is scheduled.
  // Limits how long retries will be attempted. Either this or `start_to_close_timeout` must be
  // specified. When not specified, defaults to the workflow execution timeout.
  //
  // (-- api-linter: core::0140::prepositions=disabled
  //     aip.dev/not-precedent: "to" is used to indicate interval. --)
  google.protobuf.Duration schedule_to_close = 1;
  // Limits the time an activity task can stay in a task queue before a worker picks it up. The
  // "schedule" time is when the most recent retry is scheduled. This timeout should usually not
  // be set: it's useful in specific scenarios like worker-specific task queues. This timeout is
  // always non retryable, as all a retry would achieve is to put it back into the same queue.
  // Defaults to `schedule_to_close_timeout` or workflow execution timeout if that is not
  // specified. More info:
  // https://docs.temporal.io/docs/content/what-is-a-schedule-to-start-timeout/
  //
  // (-- api-linter: core::0140::prepositions=disabled
  //     aip.dev/not-precedent: "to" is used to indicate interval. --)
  google.protobuf.Duration schedule_to_start = 2;
  // Maximum time an activity is allowed to execute after being picked up by a worker. This
  // timeout is always retryable. Either this or `schedule_to_close_timeout` must be specified.
  //
  // (-- api-linter: core::0140::prepositions=disabled
  //     aip.dev/not-precedent: "to" is used to indicate interval. --)
  google.protobuf.Duration start_to_close = 3;
  // Maximum permitted time between successful worker heartbeats.
  google.protobuf.Duration heartbeat_timeout = 4;
}

message Options {
  temporal.api.taskqueue.v1.TaskQueue task_queue = 1;

  temporal.api.activity.v1.Timeouts timeouts = 2;

  temporal.api.common.v1.RetryPolicy retry_policy = 3;
}

message OptionsUpdate {
  string task_queue = 1;

  temporal.api.activity.v1.Timeouts timeouts = 2;

  temporal.api.common.v1.RetryPolicy retry_policy = 3;

  google.protobuf.FieldMask update_mask = 4;
}