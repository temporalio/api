// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.operatorservice.v1;

option go_package = "go.temporal.io/api/operatorservice/v1;operatorservice";
option java_package = "io.temporal.api.operatorservice.v1";
option java_multiple_files = true;
option java_outer_classname = "RequestResponseProto";
option ruby_package = "Temporal::Api::OperatorService::V1";
option csharp_namespace = "Temporal.Api.OperatorService.V1";

import "temporal/api/enums/v1/common.proto";
import "temporal/api/enums/v1/namespace.proto";
import "temporal/api/namespace/v1/message.proto";
import "temporal/api/replication/v1/message.proto";

import "google/protobuf/duration.proto";

import "dependencies/gogoproto/gogo.proto";

// (-- Search Attribute --)

message AddSearchAttributesRequest {
    // Mapping between search attribute name and its IndexedValueType.
    map<string, temporal.api.enums.v1.IndexedValueType> search_attributes = 1;
}

message AddSearchAttributesResponse {
}

message RemoveSearchAttributesRequest {
    // Search attribute names to delete.
    repeated string search_attributes = 1;
}

message RemoveSearchAttributesResponse {
}

message ListSearchAttributesRequest {
}

message ListSearchAttributesResponse {
    // Mapping between custom (user-registered) search attribute name to its IndexedValueType.
    map<string, temporal.api.enums.v1.IndexedValueType> custom_attributes = 1;
    // Mapping between system (predefined) search attribute name to its IndexedValueType.
    map<string, temporal.api.enums.v1.IndexedValueType> system_attributes = 2;
    // Mapping from the attribute name to the visibility storage native type.
    map<string, string> storage_schema = 3;
}

message RegisterNamespaceRequest {
    string namespace = 1;
    string description = 2;
    string owner_email = 3;
    google.protobuf.Duration workflow_execution_retention_period = 4 [(gogoproto.stdduration) = true];
    repeated temporal.api.replication.v1.ClusterReplicationConfig clusters = 5;
    string active_cluster_name = 6;
    // A key-value map for any customized purpose.
    map<string, string> data = 7;
    string security_token = 8;
    bool is_global_namespace = 9;
    // If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
    temporal.api.enums.v1.ArchivalState history_archival_state = 10;
    string history_archival_uri = 11;
    // If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
    temporal.api.enums.v1.ArchivalState visibility_archival_state = 12;
    string visibility_archival_uri = 13;
}

message RegisterNamespaceResponse {
}

message ListNamespacesRequest {
    int32 page_size = 1;
    bytes next_page_token = 2;
    temporal.api.namespace.v1.NamespaceFilter namespace_filter = 3;
}

message ListNamespacesResponse {
    repeated DescribeNamespaceResponse namespaces = 1;
    bytes next_page_token = 2;
}

message DescribeNamespaceRequest {
    string namespace = 1;
    string id = 2;
}

message DescribeNamespaceResponse {
    temporal.api.namespace.v1.NamespaceInfo namespace_info = 1;
    temporal.api.namespace.v1.NamespaceConfig config = 2;
    temporal.api.replication.v1.NamespaceReplicationConfig replication_config = 3;
    int64 failover_version = 4;
    bool is_global_namespace = 5;
    // Contains the historical state of failover_versions for the cluster, truncated to contain only the last N
    // states to ensure that the list does not grow unbounded.
    repeated temporal.api.replication.v1.FailoverStatus failover_history = 6;
}

// (-- api-linter: core::0134::request-mask-required=disabled
//     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
// (-- api-linter: core::0134::request-resource-required=disabled
//     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
message UpdateNamespaceRequest {
    string namespace = 1;
    temporal.api.namespace.v1.UpdateNamespaceInfo update_info = 2;
    temporal.api.namespace.v1.NamespaceConfig config = 3;
    temporal.api.replication.v1.NamespaceReplicationConfig replication_config = 4;
    string security_token = 5;
    string delete_bad_binary = 6;
    // promote local namespace to global namespace. Ignored if namespace is already global namespace.
    bool promote_namespace = 7;
}

message UpdateNamespaceResponse {
    temporal.api.namespace.v1.NamespaceInfo namespace_info = 1;
    temporal.api.namespace.v1.NamespaceConfig config = 2;
    temporal.api.replication.v1.NamespaceReplicationConfig replication_config = 3;
    int64 failover_version = 4;
    bool is_global_namespace = 5;
}

// (-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
// (-- api-linter: core::0135::request-name-required=disabled
//     aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
message DeleteNamespaceRequest {
    string namespace = 1;
}

message DeleteNamespaceResponse {
    // Temporary namespace name that is used during reclaim resources step.
    string deleted_namespace = 1;
}

message AddOrUpdateRemoteClusterRequest {
    // Frontend Address is a cross cluster accessible address.
    string frontend_address = 1;
    // Flag to enable / disable the cross cluster connection.
    bool enable_remote_cluster_connection = 2;
}

message AddOrUpdateRemoteClusterResponse {
}

message RemoveRemoteClusterRequest {
    // Remote cluster name to be removed.
    string cluster_name = 1;
}

message RemoveRemoteClusterResponse {
}

message ListClustersRequest {
    int32 page_size = 1;
    bytes next_page_token = 2;
}

message ListClustersResponse {
    // List of all cluster information
    repeated ClusterMetadata clusters = 1;
    bytes next_page_token = 4;
}

message ClusterMetadata {
    // Name of the cluster name.
    string cluster_name = 1;
    // Id of the cluster.
    string cluster_id = 2;
    // Cluster accessible address.
    string address = 3;
    // A unique failover version across all connected clusters.
    int64 initial_failover_version = 4;
    // History service shard number.
    int32 history_shard_count = 5;
    // A flag to indicate if a connection is active.
    bool is_connection_enabled = 6;
}
