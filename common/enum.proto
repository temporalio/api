// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package common;

option go_package = "go.temporal.io/temporal-proto/common";
option java_package = "io.temporal.proto.common";
option java_multiple_files = true;

enum EncodingType {
    Proto3 = 0;
    JSON = 1;
}

enum WorkflowIdReusePolicy {
    // Allow start a workflow execution using the same workflow Id, when workflow not running.
    AllowDuplicate = 0;
     // Allow start a workflow execution using the same workflow Id, when workflow not running, and the last execution close state is in
     // [terminated, cancelled, timed out, failed].
    AllowDuplicateFailedOnly = 1;
    // Do not allow start a workflow execution using the same workflow Id at all.
    RejectDuplicate = 2;
}

enum ParentClosePolicy {
    Abandon = 0;
    RequestCancel = 1;
    Terminate = 2;
}

enum IndexedValueType {
    String = 0;
    Keyword = 1;
    Int = 2;
    Double = 3;
    Bool = 4;
    Datetime = 5;
}

enum ContinueAsNewInitiator {
   Decider = 0;
   Retry = 1;
   CronSchedule = 2;
}
