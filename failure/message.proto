// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package failure;

option go_package = "go.temporal.io/temporal-proto/failure";
option java_package = "io.temporal.proto.failure";
option java_multiple_files = true;


import "common/message.proto";
import "common/enum.proto";

message ApplicationFailureInfo {
    string type = 1;
    bool nonRetryable = 2;
    common.Payloads details = 3;
}

message TimeoutFailureInfo {
    common.TimeoutType timeoutType = 1;
    common.Payloads lastHeartbeatDetails = 2;
    failure.Failure lastFailure = 3;
}

message CanceledFailureInfo {
    common.Payloads details = 1;
}

message TerminatedFailureInfo {
}

message ServerFailureInfo {
    bool nonRetryable = 1;
}

message ResetWorkflowFailureInfo {
    common.Payloads lastHeartbeatDetails = 1;
}

message ActivityTaskFailureInfo {
    int64 scheduledEventId = 1;
    int64 startedEventId = 2;
    string identity = 3;
    common.ActivityType activityType = 4;
    string activityId = 5;
}

message ChildWorkflowExecutionFailureInfo {
    string namespace = 1;
    common.WorkflowExecution workflowExecution = 2;
    common.WorkflowType workflowType = 3;
    int64 initiatedEventId = 4;
    int64 startedEventId = 5;
}

message Failure {
    string message = 1;
    string source = 2;
    string stackTrace = 3;
    Failure cause = 4;
    oneof failureInfo {
        ApplicationFailureInfo applicationFailureInfo = 5;
        TimeoutFailureInfo timeoutFailureInfo = 6;
        CanceledFailureInfo canceledFailureInfo = 7;
        TerminatedFailureInfo terminatedFailureInfo = 8;
        ServerFailureInfo serverFailureInfo = 9;
        ResetWorkflowFailureInfo resetWorkflowFailureInfo = 10;
        ActivityTaskFailureInfo activityTaskFailureInfo = 11;
        ChildWorkflowExecutionFailureInfo childWorkflowExecutionFailureInfo = 12;
    }
}
