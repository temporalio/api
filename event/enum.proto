// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package event;

option go_package = "go.temporal.io/temporal-proto/event";
option java_package = "io.temporal.proto.event";
option java_multiple_files = true;

// Whenever this list of events is changed do change the function shouldBufferEvent in mutableStateBuilder.go to make sure to do the correct event ordering.
enum EventType {
    WorkflowExecutionStarted = 0;
    WorkflowExecutionCompleted = 1;
    WorkflowExecutionFailed = 2;
    WorkflowExecutionTimedOut = 3;
    DecisionTaskScheduled = 4;
    DecisionTaskStarted = 5;
    DecisionTaskCompleted = 6;
    DecisionTaskTimedOut = 7;
    DecisionTaskFailed = 8;
    ActivityTaskScheduled = 9;
    ActivityTaskStarted = 10;
    ActivityTaskCompleted = 11;
    ActivityTaskFailed = 12;
    ActivityTaskTimedOut = 13;
    ActivityTaskCancelRequested = 14;
    RequestCancelActivityTaskFailed = 15;
    ActivityTaskCanceled = 16;
    TimerStarted = 17;
    TimerFired = 18;
    CancelTimerFailed = 19;
    TimerCanceled = 20;
    WorkflowExecutionCancelRequested = 21;
    WorkflowExecutionCanceled = 22;
    RequestCancelExternalWorkflowExecutionInitiated = 23;
    RequestCancelExternalWorkflowExecutionFailed = 24;
    ExternalWorkflowExecutionCancelRequested = 25;
    MarkerRecorded = 26;
    WorkflowExecutionSignaled = 27;
    WorkflowExecutionTerminated = 28;
    WorkflowExecutionContinuedAsNew = 29;
    StartChildWorkflowExecutionInitiated = 30;
    StartChildWorkflowExecutionFailed = 31;
    ChildWorkflowExecutionStarted = 32;
    ChildWorkflowExecutionCompleted = 33;
    ChildWorkflowExecutionFailed = 34;
    ChildWorkflowExecutionCanceled = 35;
    ChildWorkflowExecutionTimedOut = 36;
    ChildWorkflowExecutionTerminated = 37;
    SignalExternalWorkflowExecutionInitiated = 38;
    SignalExternalWorkflowExecutionFailed = 39;
    ExternalWorkflowExecutionSignaled = 40;
    UpsertWorkflowSearchAttributes = 41;
}

enum DecisionTaskFailedCause {
    UnhandledDecision = 0;
    BadScheduleActivityAttributes = 1;
    BadRequestCancelActivityAttributes = 2;
    BadStartTimerAttributes = 3;
    BadCancelTimerAttributes = 4;
    BadRecordMarkerAttributes = 5;
    BadCompleteWorkflowExecutionAttributes = 6;
    BadFailWorkflowExecutionAttributes = 7;
    BadCancelWorkflowExecutionAttributes = 8;
    BadRequestCancelExternalWorkflowExecutionAttributes = 9;
    BadContinueAsNewAttributes = 10;
    StartTimerDuplicateId = 11;
    ResetStickyTasklist = 12;
    WorkflowWorkerUnhandledFailure = 13;
    BadSignalWorkflowExecutionAttributes = 14;
    BadStartChildExecutionAttributes = 15;
    ForceCloseDecision = 16;
    FailoverCloseDecision = 17;
    BadSignalInputSize = 18;
    ResetWorkflow = 19;
    BadBinary = 20;
    ScheduleActivityDuplicateId = 21;
    BadSearchAttributes = 22;
}

enum TimeoutType {
    StartToClose = 0;
    ScheduleToStart = 1;
    ScheduleToClose = 2;
    Heartbeat = 3;
}

enum WorkflowExecutionFailedCause {
    UnknownExternalWorkflowExecution = 0;
    WorkflowAlreadyRunning = 1;
}
